import cv2
import numpy as np
import glob



# 找棋盘格角点
# 设置寻找亚像素角点的参数，采用的停止准则是最大循环次数30和最大误差容限0.001
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001) # 阈值
#棋盘格模板规格
w = 9   # 10 - 1
h = 6   # 7  - 1
# 世界坐标系中的棋盘格点,例如(0,0,0), (1,0,0), (2,0,0) ....,(8,5,0)，去掉Z坐标，记为二维矩阵
objp = np.zeros((w*h,3), np.float32)
objp[:,:2] = np.mgrid[0:w,0:h].T.reshape(-1,2)
objp = objp*18.1  # 18.1 mm

# 储存棋盘格角点的世界坐标和图像坐标对
objpoints = [] # 在世界坐标系中的三维点
imgpoints = [] # 在图像平面的二维点
#加载pic文件夹下所有的jpg图像
images = glob.glob('./*.jpg')  #   拍摄的十几张棋盘图片所在目录

i=0
for fname in images:

    img = cv2.imread(fname)
    # 获取画面中心点
    #获取图像的长宽
    h1, w1 = img.shape[0], img.shape[1]
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    u, v = img.shape[:2]
    # 找到棋盘格角点
    ret, corners = cv2.findChessboardCorners(gray, (w,h),None)
    # 如果找到足够点对，将其存储起来
    if ret == True:
        print("i:", i)
        i = i+1
        # 在原角点的基础上寻找亚像素角点
        cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        #追加进入世界三维点和平面二维点中
        objpoints.append(objp)
        imgpoints.append(corners)
        # 将角点在图像上显示
        cv2.drawChessboardCorners(img, (w,h), corners, ret)
        cv2.namedWindow('findCorners', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('findCorners', 640, 480)
        cv2.imshow('findCorners',img)
        cv2.waitKey(200)
cv2.destroyAllWindows()
#%% 标定
print('正在计算')
#标定
ret, mtx, dist, rvecs, tvecs = \
    cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)


print("ret:",ret  )
print("mtx:\n",mtx)      # 内参数矩阵
print("dist畸变值:\n",dist   )   # 畸变系数   distortion cofficients = (k_1,k_2,p_1,p_2,k_3)
print("rvecs旋转（向量）外参:\n",rvecs)   # 旋转向量  # 外参数
print("tvecs平移（向量）外参:\n",tvecs  )  # 平移向量  # 外参数
newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (u, v), 0, (u, v))
print('newcameramtx外参',newcameramtx)
#打开摄像机
camera=cv2.VideoCapture(1)
while True:
    (grabbed,frame)=camera.read()
    h1, w1 = frame.shape[:2]
    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (u, v), 0, (u, v))
    # 纠正畸变
    dst1 = cv2.undistort(frame, mtx, dist, None, newcameramtx)
    #dst2 = cv2.undistort(frame, mtx, dist, None, newcameramtx)
    mapx,mapy=cv2.initUndistortRectifyMap(mtx,dist,None,newcameramtx,(w1,h1),5)
    dst2=cv2.remap(frame,mapx,mapy,cv2.INTER_LINEAR)
    # 裁剪图像，输出纠正畸变以后的图片
    x, y, w1, h1 = roi
    dst1 = dst1[y:y + h1, x:x + w1]

    #cv2.imshow('frame',dst2)
    #cv2.imshow('dst1',dst1)
    cv2.imshow('dst2', dst2)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # 按q保存一张图片
        cv2.imwrite("../u4/frame.jpg", dst1)
        break

camera.release()
cv2.destroyAllWindows()


'''result
ret: 0.42398340417595765
mtx:
 [[428.03839374   0.         339.37509535]
 [  0.         427.81724311 244.15085121]
 [  0.           0.           1.        ]]
dist畸变值:
 [[-0.01337232  0.01314211 -0.00060755 -0.00497024  0.08519319]]
rvecs旋转（向量）外参:
 (array([[0.02246534],
       [0.02312706],
       [0.01266806]]), array([[ 0.02564687],
       [ 0.00455461],
       [-0.01699374]]), array([[-0.10932515],
       [ 0.38392758],
       [-0.08491017]]), array([[-0.40499954],
       [ 0.04857707],
       [ 0.06037273]]), array([[-0.43345963],
       [ 0.07836775],
       [-0.06418671]]), array([[-0.47599652],
       [ 0.09460263],
       [-0.13363038]]), array([[-0.20608559],
       [-0.18262997],
       [-0.31010119]]), array([[-0.49742928],
       [ 0.40729504],
       [-0.01772309]]), array([[-3.78966372e-01],
       [ 2.21049355e-01],
       [-3.78003215e-04]]), array([[-0.1106126 ],
       [-0.25608758],
       [ 0.04060444]]), array([[-0.08704889],
       [-0.39012354],
       [ 0.05929525]]), array([[-0.00540413],
       [ 0.09518524],
       [-0.03615618]]), array([[-0.24125924],
       [ 0.36558225],
       [-0.03825277]]), array([[-0.01884871],
       [ 0.19472017],
       [-0.02713416]]), array([[-0.05006711],
       [ 0.01807292],
       [ 0.02352993]]), array([[-0.4401889 ],
       [ 0.01805349],
       [-0.00502969]]), array([[-0.51116376],
       [-0.09404303],
       [-0.04558948]]), array([[-0.55826158],
       [-0.20328648],
       [-0.04972313]]), array([[-0.59218853],
       [-0.31617959],
       [-0.04127512]]), array([[-0.60426764],
       [ 0.24731145],
       [ 0.02471296]]), array([[ 0.0762607 ],
       [-0.22132444],
       [ 0.01553455]]), array([[ 0.05145897],
       [ 0.13949254],
       [-0.00837547]]), array([[ 0.0129475 ],
       [-0.1259725 ],
       [ 0.03433389]]), array([[ 0.04226503],
       [-0.00592188],
       [ 0.03129866]]), array([[ 0.12579578],
       [ 0.03420917],
       [-0.03845165]]), array([[ 0.01917476],
       [-0.02638441],
       [ 0.02168297]]), array([[-0.00105631],
       [-0.17683313],
       [ 0.05730511]]), array([[ 0.0020482 ],
       [-0.01287073],
       [-0.0031942 ]]), array([[ 0.02744751],
       [-0.03955889],
       [-0.00572278]]), array([[-0.38794506],
       [ 0.00556241],
       [ 0.03583227]]))
tvecs平移（向量）外参:
 (array([[-77.72458383],
       [-40.81567792],
       [170.69605431]]), array([[-88.14823878],
       [-26.05932567],
       [174.14819232]]), array([[-110.78318322],
       [ -35.210015  ],
       [ 182.91210647]]), array([[-86.98264084],
       [-47.28910776],
       [200.53921482]]), array([[-78.07132236],
       [-33.01752709],
       [200.11677033]]), array([[-80.37949932],
       [-25.90103161],
       [220.94543822]]), array([[-66.84293235],
       [-23.67659712],
       [209.33125566]]), array([[-86.72183794],
       [-30.76076992],
       [213.51226381]]), array([[-87.61252287],
       [-36.62578981],
       [208.05510922]]), array([[-78.92740954],
       [-43.6945538 ],
       [175.62199375]]), array([[-65.28836536],
       [-49.9019878 ],
       [169.61186797]]), array([[-67.6643    ],
       [-25.30497752],
       [176.62795656]]), array([[-99.29307305],
       [-41.12632177],
       [196.04732326]]), array([[-102.78161418],
       [ -38.75659728],
       [ 174.35515557]]), array([[-86.16236169],
       [-42.64839207],
       [156.21941321]]), array([[-79.22458631],
       [-38.65606845],
       [198.9253311 ]]), array([[-83.28762828],
       [-35.64455532],
       [194.99369523]]), array([[-80.391356  ],
       [-31.62311249],
       [193.37300476]]), array([[-80.59581587],
       [-28.77082495],
       [194.02561531]]), array([[-86.78333638],
       [-26.49863386],
       [213.81270716]]), array([[-89.53377909],
       [-22.45658771],
       [186.77639792]]), array([[-79.28003014],
       [-11.33344907],
       [228.58316878]]), array([[-67.34398581],
       [-38.00894046],
       [160.30701386]]), array([[-77.56604374],
       [-16.01609364],
       [192.48183992]]), array([[-73.92335903],
       [-14.60331222],
       [179.85558329]]), array([[-76.92828612],
       [-39.94890728],
       [196.9341659 ]]), array([[-69.27186844],
       [-37.5870332 ],
       [200.17451702]]), array([[-45.11079095],
       [-25.26339201],
       [216.42154251]]), array([[-103.44952779],
       [ -29.81744201],
       [ 195.60700908]]), array([[-79.52387152],
       [-40.64512063],
       [186.97308007]]))
newcameramtx外参 [[484.55267334   0.         325.60812827]
 [  0.         480.50973511 258.93040826]
 [  0.           0.           1.        ]]
'''